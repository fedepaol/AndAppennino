package com.whiterabbit.appennino.actions;

import android.content.Context;
import android.database.Cursor;
import android.os.Parcel;
import com.whiterabbit.appennino.data.WebcamProviderClient;
import com.whiterabbit.appennino.data.WebcamProviderClientExt;
import com.whiterabbit.appennino.utils.PrefUtils;
import com.whiterabbit.postman.commands.RequestExecutor;
import com.whiterabbit.postman.commands.RestServerRequest;
import com.whiterabbit.postman.exceptions.ResultParseException;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonParser;
import org.codehaus.jackson.JsonToken;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Response;
import org.scribe.model.Verb;

import java.io.IOException;

/**
 * Created with IntelliJ IDEA.
 * User: fedepaol
 * Date: 2/3/13
 * Time: 7:52 PM
 */
public class MeteoDownloadAction implements RestServerRequest{
    private String mResort;
    private static final String BASE_URL = "http://free.worldweatheronline.com/feed/weather.ashx";

    public MeteoDownloadAction(String resort){
        mResort = resort;
    }

    @Override
    public String getOAuthSigner() {
        return null;  //TODO Autogenerated
    }

    @Override
    public String getUrl() {
        return BASE_URL;
    }

    @Override
    public Verb getVerb() {
        return Verb.GET;
    }


    // pretty sure there is a better way to handle this
    private void storeWeather(String description, String temperature, String wind,
                              String visibility, String imageUrl, long weatherCode,
                              Context c){

            Cursor cursor = WebcamProviderClientExt.getResortWeather(mResort, c);
            if(cursor.moveToFirst()){
                WebcamProviderClient.updateResortWeather(cursor.getLong(0), mResort, description,
                        temperature, wind, visibility, imageUrl, weatherCode, c);
            }else{
                WebcamProviderClient.addResortWeather(mResort, description, temperature, wind,
                                                         visibility, imageUrl, weatherCode, c);
            }

        PrefUtils.setMeteoLastUpdate(c);// This will be repeated several times

    }

    @Override
    public void processHttpResult(Response result, RequestExecutor executor, Context context) throws ResultParseException {
        String description = "";
        String temperature = "";
        String wind = "";
        String visibility = "";
        String imageUrl = "";
        long weatherCode = 0;

        JsonFactory f = new JsonFactory();
        try {
            JsonParser p = f.createJsonParser(result.getBody());
            p.nextToken();
            while(p.nextToken() != JsonToken.END_OBJECT){
                String fieldName = p.getCurrentName();
                if("current_condition".equals(fieldName)){
                    while(p.nextToken() != JsonToken.END_OBJECT){
                        String name = p.getCurrentName();
                        if("temp_C".equals(name)){
                            temperature = p.getText();
                        }
                        if("visibility".equals(name)){
                            visibility = p.getText();
                        }
                        if("windspeedKmph".equals(name)){
                            wind = p.getText();
                        }
                        if("weatherCode".equals(name)){
                            weatherCode = p.getValueAsLong();
                        }
                        if("temp_C".equals(name)){
                            temperature = p.getText();
                        }
                        if("weatherDesc".equals(p.getCurrentName())){
                            while(p.nextToken() != JsonToken.END_ARRAY){
                                if("value".equals(p.getCurrentName())){
                                    description = p.getText();
                                }
                            }
                        }
                        if("weatherIconUrl".equals(p.getCurrentName())){
                            while(p.nextToken() != JsonToken.END_ARRAY){
                                if("value".equals(p.getCurrentName())){
                                    imageUrl = p.getText();
                                }
                            }
                        }
                    }
                }
            }
            storeWeather(description, temperature, wind, visibility, imageUrl, weatherCode, context);

        } catch (IOException e) {
            //TODO Notify error
        }
    }

    @Override
    public void addParamsToRequest(OAuthRequest request) {
        if(mResort.equals("Abetone")){
            request.addQuerystringParameter("q", "abetone");
        }else{
            request.addQuerystringParameter("q", "44.19,10.70");
        }
        request.addQuerystringParameter("format", "json");
        request.addQuerystringParameter("num_of_days", "2");
        request.addQuerystringParameter("key", "18a33ad9db184852130302");
    }

    @Override
    public int describeContents() {
        return 0;  //TODO Autogenerated
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeString(mResort);
    }

    public static final Creator<MeteoDownloadAction> CREATOR
            = new Creator<MeteoDownloadAction>() {
        public MeteoDownloadAction createFromParcel(Parcel in) {
            return new MeteoDownloadAction(in);
        }

        public MeteoDownloadAction[] newArray(int size) {
            return new MeteoDownloadAction[size];
        }
    };

    public MeteoDownloadAction(Parcel in){
        mResort = in.readString();
    }
}
