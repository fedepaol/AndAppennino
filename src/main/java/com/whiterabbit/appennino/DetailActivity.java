package com.whiterabbit.appennino;

import android.content.Intent;
import android.os.Bundle;
import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.Window;
import com.whiterabbit.appennino.com.whiterabbit.appennino.actions.WebcamDownloadAction;
import com.whiterabbit.postman.ServerInteractionHelper;
import com.whiterabbit.postman.ServerInteractionResponseInterface;
import com.whiterabbit.postman.exceptions.SendingCommandException;

/**
 * Created with IntelliJ IDEA.
 * User: fedepaol
 * Date: 1/31/13
 * Time: 11:59 PM
 */
public class DetailActivity extends SherlockFragmentActivity implements ServerInteractionResponseInterface {
    public static final String URL = "com.whiterabbit.appennino.url";
    public static final String TITLE = "com.whiterabbit.appennino.title";
    public static final String FILENAME = "com.whiterabbit.appennino.filename";

    private String mUrl;
    private String mTitle;
    private boolean mUpdating;

    WebcamDetailFragment mDetailFragment;
    ServerInteractionHelper mServerHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
        setContentView(R.layout.webcam_activity);

        Intent i = getIntent();
        mUrl = i.getStringExtra(URL);
        mTitle = i.getStringExtra(TITLE);

        mServerHelper = ServerInteractionHelper.getInstance();
        mDetailFragment = (WebcamDetailFragment) getSupportFragmentManager().findFragmentById(R.id.webcam_detail_fragment);

        mDetailFragment.update(mTitle, mUrl);
    }

    @Override
    protected void onResume() {
        super.onResume();    // Autogenerated
        mServerHelper.registerEventListener(this, this);
        if(mServerHelper.isRequestAlreadyPending(mUrl)){
            setUpdating();
        }
    }

    @Override
    public void onServerResult(String result, String requestId) {
        if(requestId.equals(mUrl)){
            mDetailFragment.update(mTitle, mUrl);
            setSupportProgressBarIndeterminateVisibility(false);
            updateDone();
        }
    }

    @Override
    public void onServerError(String result, String requestId) {
        setSupportProgressBarIndeterminateVisibility(false);
        updateDone();
    }

    @Override
    protected void onPause() {
        super.onPause();
        ServerInteractionHelper.getInstance().unregisterEventListener(this, this);
    }

    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        if(item.getTitle().equals("Refresh")){
            try {
                mServerHelper.sendRestAction(this, mUrl, new WebcamDownloadAction(mUrl));
                setUpdating();
                return true;
            } catch (SendingCommandException e) {
                // TODO Handle failure
            }
        }
        return false;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if(!mUpdating){
            menu.add("Refresh")
                .setIcon(R.drawable.ic_refresh)
                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
            return true;
        }
        return false;

    }


    private void setUpdating(){
        mUpdating = true;
        setSupportProgressBarIndeterminateVisibility(true);
        invalidateOptionsMenu();
    }

    private void updateDone(){
        mUpdating = false;
        setSupportProgressBarIndeterminateVisibility(false);
        invalidateOptionsMenu();
    }



}
